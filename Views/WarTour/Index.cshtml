@model RR_Clan_Management.ViewModels.WarTourViewModel

<div class="d-flex align-items-center gap-2 mb-3">
    <h2 class="mb-0">War / Tour</h2>
    <button id="edit-btn" class="btn btn-primary">Szerkesztés</button>
    <button id="add-column-btn" class="btn btn-success" style="display: none;">+Adat</button>
    <button id="save-btn" class="btn btn-warning" style="display: none;">Mentés</button>
    <button id="edit-header-btn" class="btn btn-warning" style="display:none;">Fejléc módosítása</button>
</div>

@if (Model.Rows.Count == 0)
{
    <p style="color: red;">⚠ Nincsenek megjeleníthető játékosok!</p>
}

<label>
    <input type="checkbox" id="showAllPlayers" onchange="reloadPlayers()" @(ViewBag.ShowAll ? "checked" : "")>
    Összes játékos megjelenítése
</label>

@*
<button id="edit-btn" class="btn btn-primary">Szerkesztés</button>
<button id="add-column-btn" class="btn btn-secondary" style="display:none;">Oszlop hozzáadása</button>
<button id="save-btn" class="btn btn-success" style="display:none;">Mentés</button>*@
<div class="table-container">
    <table class="warTourTable">
    <thead>
        <tr id="table-header">
            <th>Játékos neve</th>
            @foreach (var column in Model.ColumnHeaders)
            {
                <th>@column</th> <!-- 📌 Minden oszlop fejlécnek bekerül -->
            }
        </tr>
    </thead>
    <tbody id="table-body">
            @foreach (var row in Model.Rows)
            {
                <tr>
                    <td>@row.PlayerName</td>
                    @foreach (var column in Model.ColumnHeaders)
                    {
                        var value = row.Columns.ContainsKey(column) ? row.Columns[column] : "-";
                        var cssClass = "";

                        if (value == "Részt vett") cssClass = "green";
                        else if (value == "Részben vett részt") cssClass = "yellow";
                        else if (value == "Nem vett részt") cssClass = "red";
                        else if (value == "Felmentve") cssClass = "blue";
                        else if (value == "-") cssClass = "gray";

                        <td class="@cssClass">@value</td>
                    }
                </tr>
            }

    </tbody>
</table>
</div>

<script>
    let isEditing = false; // Állapotváltozó a szerkesztési mód követésére
    let originalData = []; // Eredeti adatok tárolása
    let addedColumns = []; // Hozzáadott oszlopok tárolása
    let originalHeaders = []; // 💾 Fejléc mentése


    document.getElementById("edit-btn").addEventListener("click", function () {

        let tableHeader = document.getElementById("table-header");
        let tableBody = document.getElementById("table-body");
        let rows = tableBody.getElementsByTagName("tr");

        if (!isEditing) {

            logClientEvent("War/Tour szerkesztés", "UI művelet");

            // 🔹 Szerkesztési mód aktiválása
            document.getElementById("add-column-btn").style.display = "inline-block";
            document.getElementById("save-btn").style.display = "inline-block";
            document.getElementById("edit-header-btn").style.display = "inline-block";
            this.textContent = "Mégse"; // Gomb szövegének megváltoztatása

            originalData = [];
            addedColumns = [];

            // Fejléc nevek elmentése
            let headerCells = document.getElementById("table-header").getElementsByTagName("th");
            originalHeaders = [];
            for (let i = 1; i < headerCells.length; i++) {
                originalHeaders.push(headerCells[i].textContent.trim());
            }

            for (let row of rows) {
                let rowData = [];
                for (let i = 1; i < row.cells.length; i++) {
                    let cell = row.cells[i];
                    let currentText = cell.textContent.trim();
                    rowData.push(currentText);

                    if (cell.querySelector("select")) continue;

                    let select = document.createElement("select");
                    select.className = "form-control";

                    let options = ["-", "Részt vett", "Részben vett részt", "Nem vett részt", "Felmentve"];
                    options.forEach(optionText => {
                        let option = document.createElement("option");
                        option.value = optionText;
                        option.textContent = optionText;
                        if (optionText === currentText || (currentText === "" && optionText === "-")) {
                            option.selected = true;
                        }
                        select.appendChild(option);
                    });

                    cell.textContent = "";
                    cell.appendChild(select);
                }
                originalData.push(rowData);
            }

            isEditing = true;

        } else {

            logClientEvent("War/Tour szerkesztés visszavonása", "UI művelet");

            // 🔹 Visszaállítás alap nézetre (mentés nélkül)
            document.getElementById("add-column-btn").style.display = "none";
            document.getElementById("save-btn").style.display = "none";
            document.getElementById("edit-header-btn").style.display = "none";
            this.textContent = "Szerkesztés";

            // Fejléc visszaállítása
            let tableHeader = document.getElementById("table-header");
            let headerCells = tableHeader.getElementsByTagName("th");
            for (let i = 1; i < headerCells.length; i++) {
                let cell = headerCells[i];
                cell.textContent = originalHeaders[i - 1]; // ⬅ Eredeti fejlécnév vissza
            }

            let rowIndex = 0;
            for (let row of rows) {
                for (let i = 1; i < row.cells.length; i++) {
                    row.cells[i].textContent = originalData[rowIndex][i - 1];
                }
                rowIndex++;
            }

            // Újonnan hozzáadott oszlopok eltávolítása
            addedColumns.forEach(index => {
                tableHeader.deleteCell(index);
                for (let row of rows) {
                    row.deleteCell(index);
                }
            });

            isEditing = false;
            addedColumns = [];
        }
    });

   document.getElementById("edit-header-btn").addEventListener("click", function () {

        logClientEvent("War/Tour szerkesztés_fejléc", "UI művelet");

    let headerCells = document.querySelectorAll("#table-header th");
    let startIndex = 1; // Az első oszlop (sorszám vagy név) nem szerkeszthető

    for (let i = startIndex; i < headerCells.length; i++) {
        let th = headerCells[i];

        // Ne duplikáljuk az inputot vagy törlés gombot
        if (th.querySelector("input")) continue;

        let originalText = th.textContent;
        th.textContent = "";

        let input = document.createElement("input");
        input.type = "text";
        input.className = "form-control mb-1";
        input.value = originalText;

            // Törlés gomb
            let deleteBtn = document.createElement("button");
            deleteBtn.textContent = "Törlés";
            deleteBtn.className = "btn btn-danger btn-sm d-block";

            deleteBtn.onclick = function () {
                let index = Array.from(headerCells).indexOf(th);

                let columnName = input.value.trim() || th.textContent.trim();

                if (!confirm(`Biztosan törölni szeretnéd a(z) "${columnName}" nevű oszlopot?`)) {
                    return;
                }

                // Töröljük a fejléc cellát
                th.remove();

                // Töröljük az adott indexű cellát minden sorból
                let tableBody = document.getElementById("table-body");
                let rows = tableBody.getElementsByTagName("tr");
                for (let row of rows) {
                    row.deleteCell(index);
                }

                // ⛏️ Frissítjük az addedColumns tömböt
                addedColumns = addedColumns
                    .filter(i => i !== index)                 // eltávolítjuk a törölt oszlop indexét
                    .map(i => i > index ? i - 1 : i);         // eltoljuk a későbbi indexeket
            };

            th.appendChild(input);
            th.appendChild(deleteBtn);

    }
});

    document.getElementById("add-column-btn").addEventListener("click", function () {

        logClientEvent("War/Tour szerkesztés_új oszlop", "UI művelet");

        let tableHeader = document.getElementById("table-header");
        let newTh = document.createElement("th");
        let input = document.createElement("input");
        input.type = "text";
        input.className = "form-control";
        input.placeholder = "Oszlop név";
        newTh.appendChild(input);
        tableHeader.appendChild(newTh);

        let tableBody = document.getElementById("table-body");
        let rows = tableBody.getElementsByTagName("tr");

        let columnIndex = tableHeader.cells.length - 1; // Az új oszlop indexe
        addedColumns.push(columnIndex); // Eltároljuk az új oszlop indexét

        for (let row of rows) {
            let newTd = document.createElement("td");
            let select = document.createElement("select");
            select.className = "form-control";

            let options = ["-", "Részt vett", "Részben vett részt", "Nem vett részt", "Felmentve"];
            options.forEach(optionText => {
                let option = document.createElement("option");
                option.value = optionText;
                option.textContent = optionText;
                select.appendChild(option);
            });

            select.value = "Részt vett"; // 📌 Beállítja az alapértelmezett értéket

            newTd.appendChild(select);
            row.appendChild(newTd);
        }

        // 📌 Automatikusan odagörget az új oszlophoz
        setTimeout(() => {
            newTh.scrollIntoView({ behavior: "smooth", block: "center" });
        }, 100);
    });

    document.getElementById("save-btn").addEventListener("click", function () {

        logClientEvent("War/Tour szerkesztés_mentés", "UI művelet");

        let table = document.getElementById("table-body");
        let rows = table.getElementsByTagName("tr");
        let headers = document.getElementById("table-header").getElementsByTagName("th");

        let columnNames = [];
        let columnIndices = [];

        for (let i = 1; i < headers.length; i++) {
            let input = headers[i].querySelector("input");
            let colName = input ? input.value.trim() : headers[i].textContent.trim();

            if (colName !== "") {
                columnNames.push(colName);
                columnIndices.push(i);
            }
        }

        let data = [];
        for (let row of rows) {
            let playerName = row.cells[0].textContent;
            let rowData = { PlayerName: playerName, Columns: {} };

            for (let i = 0; i < columnIndices.length; i++) {
                let colIndex = columnIndices[i];
                let colName = columnNames[i];

                let select = row.cells[colIndex].querySelector("select");
                if (select) {
                    rowData.Columns[colName] = select.value;
                }
            }
            data.push(rowData);
        }

        fetch('/WarTour/Save', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // ✅ Sikeres mentés esetén frissítjük az oldalt
                }
            });
    });

</script>

<script>
    function reloadPlayers() {
        var showAll = document.getElementById("showAllPlayers").checked;
        window.location.href = '/WarTour?showAll=' + showAll;
    }

    window.onload = function () {
        var urlParams = new URLSearchParams(window.location.search);
        var showAll = urlParams.get('showAll') === 'true';
        document.getElementById("showAllPlayers").checked = showAll;

        // 🔹 "Szerkesztés" gomb elrejtése, ha a checkbox be van pipálva
        var editButton = document.getElementById("edit-btn");
        if (editButton) {
            editButton.style.display = showAll ? "none" : "inline-block";
        }
    };
</script>

<script>
    function logClientEvent(message, type = "ClientEvent") {
        fetch('/WarTour/LogClientEvent', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: message,
                type: type
            })
        })
            .then(response => {
                if (!response.ok) {
                    console.error("Logolás sikertelen:", response.statusText);
                }
            })
            .catch(error => {
                console.error("Hálózati hiba:", error);
            });
    }
</script>


